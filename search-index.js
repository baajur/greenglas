var N=null,E="",T="t",U="u",searchIndex={};
var R=["When The Image Pixel Buffer can't be converted to a…","Transformer","sharedtensor","transformererror","result","flatbox","greenglas","height","greenglas::image","image","modifiers","A trait providing the set and set_mut methods for all types.","Modify self using the provided modifier.","Modify self through a mutable reference with the provided…","greenglas::transformer","try_from","try_into","borrow_mut","greenglas::image::modifiers","to_owned","clone_into","type_id","borrow","typeid","greenglas::word","transform_to_vec","formatter","TransformerError","Modifier","Grayscale"];

searchIndex["greenglas"]={"doc":"Greenglas provides convenient and universal Machine…","i":[[8,"Set",R[6],R[11],N,N],[11,"set",E,R[12],0,[[["m"]],["self"]]],[11,"set_mut",E,R[13],0,[[["self"],["m"]],["self"]]],[0,"transformer",E,R[1],N,N],[4,R[27],R[14],"The Transformer Errors",N,N],[13,"InvalidShape",E,"When the speficied shape capacitiy differs from the actual…",1,N],[13,"InvalidRgbPixels",E,"When The Image Pixel Buffer can't be converted to a RGB…",1,N],[13,"InvalidRgbaPixels",E,"When The Image Pixel Buffer can't be converted to a RGBA…",1,N],[13,"InvalidLumaPixels",E,R[0],1,N],[13,"InvalidLumaAlphaPixels",E,R[0],1,N],[8,R[1],E,"The Transformer Trait",N,N],[11,"transform",E,"Transforms non-numeric data into a numeric `SharedTensor`",2,[[["self"]],[[R[4],[R[2],R[3]]],[R[2],["f32"]],[R[3]]]]],[10,R[25],E,"Transforms the non-numeric data into a numeric `Vec`",2,[[["self"]],[["f32"],["vec",["f32"]]]]],[11,"write_to_memory",E,"Write into a native Coaster Memory.",2,[[[R[5]]],[[R[3]],[R[4],[R[3]]]]]],[11,"write_to_memory_offset",E,"Write into a native Coaster Memory with a offset.",2,[[[R[5]],["usize"]],[[R[3]],[R[4],[R[3]]]]]],[0,R[9],R[6],"The Image Struct and its Modifiers",N,N],[3,"Image",R[8],"The Transformable Data Type `Image`",N,N],[0,R[10],E,"The Modifiers form `Image`",N,N],[3,"Resize",R[18],"Resize Modifier for `Image`",N,N],[12,"width",E,"The resized width of the new Image",3,N],[12,R[7],E,"The resized heigt of the new Image",3,N],[3,"Crop",E,"Crop Modifier for `Image`",N,N],[12,"x",E,"The x value from where the new Image should start",4,N],[12,"y",E,"The y value from where the new Image should start",4,N],[12,"width",E,"The width for the new Image",4,N],[12,R[7],E,"The height for the new Image",4,N],[3,R[29],E,"Grayscale Modifier for `Image`",N,N],[11,"new",R[8],"Create a new Image from a DynamicImage",5,[[["dynamicimage"]],[R[9]]]],[11,"from_path",E,"Create a new Image from a Path",5,[[["p"]],[R[9]]]],[11,"from_buffer",E,"Create a new Image from Buffer",5,[[],[R[9]]]],[11,"from_rgb_pixels",E,"Create a new Image from RGB style pixel container such as…",5,[[["u32"],["vec",["u8"]],["u8"]],[[R[9]],[R[4],[R[9],R[3]]],[R[3]]]]],[11,"from_rgba_pixels",E,"Create a new Image from RGBa style pixel container such as…",5,[[["u32"],["vec",["u8"]],["u8"]],[[R[9]],[R[4],[R[9],R[3]]],[R[3]]]]],[11,"from_luma_pixels",E,"Create a new Image from Luma (greyscale) style pixel…",5,[[["u32"],["vec",["u8"]],["u8"]],[[R[9]],[R[4],[R[9],R[3]]],[R[3]]]]],[11,"from_lumaa_pixels",E,"Create a new Image from LumaA style pixel container such…",5,[[["u32"],["vec",["u8"]],["u8"]],[[R[9]],[R[4],[R[9],R[3]]],[R[3]]]]],[0,"word",R[6],"The Word Struct and its Modifiers",N,N],[3,"Word",R[24],"The Transformable Data Type `Word`",N,N],[0,R[10],E,"The Modifiers for `Word`",N,N],[11,"new",E,"Creates a new `Word`",6,[[["string"]],["word"]]],[0,"modifier",R[6],"Re-exports from the modifier crate.",N,N],[8,R[28],"greenglas::modifier","Allows use of the implemented type as an argument to…",N,N],[10,"modify",E,"Modify `F` with self.",7,[[["f"]]]],[8,"Set",E,R[11],N,N],[11,"set",E,R[12],0,[[["m"]],["self"]]],[11,"set_mut",E,R[13],0,[[["self"],["m"]],["self"]]],[11,"into",R[14],E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[19],E,E,1,[[["self"]],[T]]],[11,R[20],E,E,1,[[["self"],[T]]]],[11,R[15],E,E,1,[[[U]],[R[4]]]],[11,R[16],E,E,1,[[],[R[4]]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[21],E,E,1,[[["self"]],[R[23]]]],[11,"into",R[8],E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[15],E,E,5,[[[U]],[R[4]]]],[11,R[16],E,E,5,[[],[R[4]]]],[11,R[22],E,E,5,[[["self"]],[T]]],[11,R[17],E,E,5,[[["self"]],[T]]],[11,R[21],E,E,5,[[["self"]],[R[23]]]],[11,"into",R[18],E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[19],E,E,3,[[["self"]],[T]]],[11,R[20],E,E,3,[[["self"],[T]]]],[11,R[15],E,E,3,[[[U]],[R[4]]]],[11,R[16],E,E,3,[[],[R[4]]]],[11,R[22],E,E,3,[[["self"]],[T]]],[11,R[17],E,E,3,[[["self"]],[T]]],[11,R[21],E,E,3,[[["self"]],[R[23]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[19],E,E,4,[[["self"]],[T]]],[11,R[20],E,E,4,[[["self"],[T]]]],[11,R[15],E,E,4,[[[U]],[R[4]]]],[11,R[16],E,E,4,[[],[R[4]]]],[11,R[22],E,E,4,[[["self"]],[T]]],[11,R[17],E,E,4,[[["self"]],[T]]],[11,R[21],E,E,4,[[["self"]],[R[23]]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[19],E,E,8,[[["self"]],[T]]],[11,R[20],E,E,8,[[["self"],[T]]]],[11,R[15],E,E,8,[[[U]],[R[4]]]],[11,R[16],E,E,8,[[],[R[4]]]],[11,R[22],E,E,8,[[["self"]],[T]]],[11,R[17],E,E,8,[[["self"]],[T]]],[11,R[21],E,E,8,[[["self"]],[R[23]]]],[11,"into",R[24],E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[15],E,E,6,[[[U]],[R[4]]]],[11,R[16],E,E,6,[[],[R[4]]]],[11,R[22],E,E,6,[[["self"]],[T]]],[11,R[17],E,E,6,[[["self"]],[T]]],[11,R[21],E,E,6,[[["self"]],[R[23]]]],[11,R[25],R[8],E,5,[[["self"]],[["f32"],["vec",["f32"]]]]],[11,R[25],R[24],E,6,[[["self"]],[["f32"],["vec",["f32"]]]]],[11,"clone",R[14],E,1,[[["self"]],[R[3]]]],[11,"clone",R[18],E,3,[[["self"]],["resize"]]],[11,"clone",E,E,4,[[["self"]],["crop"]]],[11,"clone",E,E,8,[[["self"]],["grayscale"]]],[11,"fmt",R[14],E,1,[[["self"],[R[26]]],[R[4]]]],[11,"fmt",R[18],E,3,[[["self"],[R[26]]],[R[4]]]],[11,"fmt",E,E,4,[[["self"],[R[26]]],[R[4]]]],[11,"fmt",E,E,8,[[["self"],[R[26]]],[R[4]]]],[11,"fmt",R[24],E,6,[[["self"],[R[26]]],[R[4]]]],[11,"modify",R[18],E,3,[[[R[9]]]]],[11,"modify",E,E,4,[[[R[9]]]]],[11,"modify",E,E,8,[[[R[9]]]]]],"p":[[8,"Set"],[4,R[27]],[8,R[1]],[3,"Resize"],[3,"Crop"],[3,"Image"],[3,"Word"],[8,R[28]],[3,R[29]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);